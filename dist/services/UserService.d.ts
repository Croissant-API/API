import { IDatabaseService } from "./DatabaseService";
import { User, PublicUser, UserExtensions, PublicUserAsAdmin } from "../interfaces/User";
export interface IUserService {
    updateSteamFields(user_id: string, steam_id: string | null, steam_username: string | null, steam_avatar_url: string | null): Promise<void>;
    searchUsersByUsername(query: string): Promise<PublicUser[]>;
    updateUserBalance(user_id: string, balance: number): Promise<void>;
    createUser(user_id: string, username: string, email: string, password: string | null, provider?: "discord" | "google", providerId?: string): Promise<User>;
    createBrandUser(user_id: string, username: string): Promise<User>;
    getUser(user_id: string): Promise<User | null>;
    adminGetUser(user_id: string): Promise<User | null>;
    adminSearchUsers(query: string): Promise<PublicUser[]>;
    getAllUsers(): Promise<User[]>;
    getAllUsersWithDisabled(): Promise<User[]>;
    updateUser(user_id: string, username?: string, balance?: number): Promise<void>;
    deleteUser(user_id: string): Promise<void>;
    authenticateUser(api_key: string): Promise<User | null>;
    updateUserPassword(user_id: string, hashedPassword: string): Promise<void>;
    disableAccount(targetUserId: string, adminUserId: string): Promise<void>;
    reenableAccount(targetUserId: string, adminUserId: string): Promise<void>;
    findByEmail(email: string): Promise<User | null>;
    associateOAuth(user_id: string, provider: "discord" | "google", providerId: string): Promise<void>;
    getUserBySteamId(steamId: string): Promise<User | null>;
    generatePasswordResetToken(user_id: string): Promise<string>;
    updateWebauthnChallenge(user_id: string, challenge: string | null): Promise<void>;
    addWebauthnCredential(userId: string, credential: {
        id: string;
        name: string;
        created_at: Date;
    }): Promise<void>;
    getUserByCredentialId(credentialId: string): Promise<User | null>;
    setAuthenticatorSecret(userId: string, secret: string | null): Promise<void>;
    getAuthenticatorSecret(userId: string): Promise<string | null>;
    getUserWithCompleteProfile(user_id: string): Promise<(User & UserExtensions) | null>;
    getUserWithPublicProfile(user_id: string): Promise<(PublicUser & UserExtensions) | null>;
    adminGetUserWithProfile(user_id: string): Promise<(PublicUserAsAdmin & UserExtensions) | null>;
    findByResetToken(reset_token: string): Promise<User | null>;
    getSteamAuthUrl(): string;
}
export declare class UserService implements IUserService {
    private databaseService;
    constructor(databaseService: IDatabaseService);
    private static getIdWhereClause;
    private fetchUserByAnyId;
    private fetchAllUsers;
    private updateUserFields;
    updateSteamFields(user_id: string, steam_id: string | null, steam_username: string | null, steam_avatar_url: string | null): Promise<void>;
    findByEmail(email: string): Promise<User | null>;
    associateOAuth(user_id: string, provider: "discord" | "google", providerId: string): Promise<void>;
    disableAccount(targetUserId: string, adminUserId: string): Promise<void>;
    reenableAccount(targetUserId: string, adminUserId: string): Promise<void>;
    searchUsersByUsername(query: string): Promise<PublicUser[]>;
    createUser(user_id: string, username: string, email: string, password: string | null, provider?: "discord" | "google", providerId?: string): Promise<User>;
    createBrandUser(user_id: string, username: string): Promise<User>;
    getUser(user_id: string): Promise<User | null>;
    adminGetUser(user_id: string): Promise<User | null>;
    adminSearchUsers(query: string): Promise<PublicUser[]>;
    getAllUsers(): Promise<User[]>;
    getAllUsersWithDisabled(): Promise<User[]>;
    updateUser(user_id: string, username?: string, balance?: number): Promise<void>;
    updateUserBalance(user_id: string, balance: number): Promise<void>;
    updateUserPassword(user_id: string, hashedPassword: string): Promise<void>;
    getUserBySteamId(steamId: string): Promise<User | null>;
    generatePasswordResetToken(email: string): Promise<string>;
    deleteUser(user_id: string): Promise<void>;
    authenticateUser(tokenOrApiKey: string): Promise<User | null>;
    updateWebauthnChallenge(user_id: string, challenge: string | null): Promise<void>;
    addWebauthnCredential(userId: string, credential: {
        id: string;
        name: string;
        created_at: Date;
    }): Promise<void>;
    getUserByCredentialId(credentialId: string): Promise<User | null>;
    setAuthenticatorSecret(userId: string, secret: string | null): Promise<void>;
    getAuthenticatorSecret(userId: string): Promise<string | null>;
    getUserWithCompleteProfile(user_id: string): Promise<(User & UserExtensions) | null>;
    getUserWithPublicProfile(user_id: string): Promise<(PublicUser & UserExtensions) | null>;
    adminGetUserWithProfile(user_id: string): Promise<(PublicUserAsAdmin & UserExtensions) | null>;
    findByResetToken(reset_token: string): Promise<User | null>;
    getSteamAuthUrl(): string;
}
