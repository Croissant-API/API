import { Request, Response } from "express";
import { IUserService } from "../services/UserService";
import { ILogService } from "../services/LogService";
import { AuthenticatedRequest } from "../middlewares/LoggedCheck";
import { MailService } from "../services/MailService";
import { StudioService } from "../services/StudioService";
import { SteamOAuthService } from "../services/SteamOAuthService";
export declare class Users {
    private userService;
    private logService;
    private mailService;
    private studioService;
    private steamOAuthService;
    constructor(userService: IUserService, logService: ILogService, mailService: MailService, studioService: StudioService, steamOAuthService: SteamOAuthService);
    private sendError;
    private createLog;
    private mapUser;
    private mapUserSearch;
    loginOAuth(req: Request, res: Response): Promise<Response<any, Record<string, any>> | undefined>;
    register(req: Request, res: Response): Promise<Response<any, Record<string, any>> | undefined>;
    login(req: Request, res: Response): Promise<Response<any, Record<string, any>> | undefined>;
    getMe(req: AuthenticatedRequest, res: Response): Promise<Response<any, Record<string, any>> | undefined>;
    changeUsername(req: AuthenticatedRequest, res: Response): Promise<Response<any, Record<string, any>> | undefined>;
    changePassword(req: AuthenticatedRequest, res: Response): Promise<Response<any, Record<string, any>> | undefined>;
    forgotPassword(req: Request, res: Response): Promise<Response<any, Record<string, any>> | undefined>;
    resetPassword(req: Request, res: Response): Promise<Response<any, Record<string, any>> | undefined>;
    isValidResetToken(req: Request, res: Response): Promise<Response<any, Record<string, any>> | undefined>;
    steamRedirect(req: Request, res: Response): Promise<void>;
    steamAssociate(req: AuthenticatedRequest, res: Response): Promise<Response<any, Record<string, any>> | undefined>;
    unlinkSteam(req: AuthenticatedRequest, res: Response): Promise<Response<any, Record<string, any>> | undefined>;
    searchUsers(req: Request, res: Response): Promise<Response<any, Record<string, any>> | undefined>;
    getUser(req: Request, res: Response): Promise<Response<any, Record<string, any>> | undefined>;
    adminSearchUsers(req: AuthenticatedRequest, res: Response): Promise<Response<any, Record<string, any>> | undefined>;
    disableAccount(req: AuthenticatedRequest, res: Response): Promise<Response<any, Record<string, any>> | undefined>;
    reenableAccount(req: AuthenticatedRequest, res: Response): Promise<Response<any, Record<string, any>> | undefined>;
    adminGetUser(req: AuthenticatedRequest, res: Response): Promise<Response<any, Record<string, any>> | undefined>;
    transferCredits(req: AuthenticatedRequest, res: Response): Promise<Response<any, Record<string, any>> | undefined>;
    checkVerificationKey(req: Request, res: Response): Promise<Response<any, Record<string, any>> | undefined>;
    changeRole(req: AuthenticatedRequest, res: Response): Promise<Response<any, Record<string, any>> | undefined>;
}
